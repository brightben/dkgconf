#!/usr/bin/env python
# TODO: get_local_ip() can't run on some linux system.

import subprocess as sp
import re
import urllib, urllib2
import os
import sys

def openurl(url, params, method="GET"):
    '''open the url
    args:
        @url(string): the url to be opened.
        @params(dict): the url's params
        @method(string): GET/POST
    
    return value:
        urllib2.rulopen() instance. you can get the content by .read().
    
    example:
        openurl('http://www.google.com/', {'q':'google'}, 'GET').read()
    '''
    if method == "POST":
        return urllib2.urlopen(url, data=urllib.urlencode(params))
    else:
        return urllib2.urlopen(url + "?" + urllib.urlencode(params))
        

def get_local_ip():
    p = sp.Popen(['ifconfig'], stdout=sp.PIPE)
    out = p.communicate()[0]
    
    ncs = []
    for line in out.splitlines():
        m = re.search(r'^(\w+:)', line)
        if m:
            ncs.append([])
            ncs[-1].append(m.group(1))
        else:
            if 'inet6' in line: continue
            if 'ether' in line or 'inet' in line:
                ncs[-1].append(line)
            
    # delete the NetworkCard if no info
    ncs = filter(lambda x: len(x)>2, ncs)
        
    for nc in ncs:
        print '\n'.join(nc)
    
    
def get_external_ip():
    hosts = [
        ('http://checkip.dyndns.org/', {}, r'Current IP Address: ([0-9.]+)</body>'),
        ('http://dir.twseo.org/ip-check.php', {}, r'<font color=#ff6600>([0-9.]+)</font>'),
        ('http://www.whatismyip.com.tw', {}, r'<h2>([0-9.]+)</h2>'),
    ]
    
    # use fork() instead
    cpids = []
    for host, params, pattern in hosts:
        cpid = os.fork()
        if cpid != 0:       # parent
            cpids.append(cpid)
        else:
            try:
                r = openurl(host, params)
                m = re.search(pattern, r.read())
                if not m: raise Exception('pattern match error!')
                ip = m.group(1)
            
            except urllib2.URLError as e:
                print host + ':'
                print '\t' + str(e.reason)
                
            except Exception as e:
                print host + ':'
                print '\t' + e.message
                
            else:
                print host + ':'
                print '\t' + ip
            exit(0)
    
    for cpid in cpids:
        os.waitpid(cpid, 0)
    print
        
    
#    class GetIPThread(threading.Thread):
#        def __init__(self, host, params, pattern):
#            threading.Thread.__init__(self)
#            self.host, self.params, self.pattern = host, params, pattern
#            
#        def run(self):
#            try:
#                r = openurl(self.host, self.params)
#                m = re.search(self.pattern, r.read())
#                if not m: raise Exception('pattern match error!')
#                ip = m.group(1)
#            
#            except urllib2.URLError as e:
#                print self.host
#                print '\t' + str(e.reason)
#                
#            except Exception as e:
#                print self.host
#                print '\t' + e.message
#                
#            else:
#                print self.host + ':'
#                print '\t' + ip
#            
#    ts = []
#    for host in hosts:
#        t = GetIPThread(*host)
#        t.daemon = True
#        t.start()
#        ts.append(t)
#    
#    for t in ts:
#        t.join()
#    print


def find_ip(ip):
    url = 'http://dir.twseo.org/ip-query3.php'
    params = dict(inputip=ip)
    info = openurl(url, params, 'POST').read().decode('utf8')
    
    country = info.split('<br>')[1]
    country = re.search(r'#ff6600>(.*)</font>', country).group(1)
    print '%s: %s'%(ip, country)
    

def main():
    if len(sys.argv) > 1:
        for ip in sys.argv[1:]:
            find_ip(ip)
        
    else:
        try:
            get_local_ip()
            print '--------------------'
            get_external_ip()
        except KeyboardInterrupt:
            print '^c Exit.'

if __name__=='__main__': main()

